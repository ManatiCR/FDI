ahoyapi: v2
commands:
  deploy:
    usage: Deploy the site using ahoy
    cmd: |
      BRANCH=$1
      MESSAGE=$2
      # @TODO: Add Pantheon repo url.
      REPO="ssh://codeserver.dev.7ddac6a5-b990-41cd-958e-8792f2c2b859@codeserver.dev.7ddac6a5-b990-41cd-958e-8792f2c2b859.drush.in:2222/~/repository.git"
      BUILDFOLDER=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 12 | head -n 1`
      CLONEFOLDER=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 12 | head -n 1`
      mv web $BUILDFOLDER
      git clone --branch $BRANCH $REPO $CLONEFOLDER || git clone $REPO $CLONEFOLDER
      cd $CLONEFOLDER
      git branch $BRANCH ; git checkout $BRANCH
      shopt -s extglob
      rm -rf ./!(.git|.|..)
      cd ../
      composer install --no-dev --ignore-platform-reqs
      find ./web/modules/contrib/ -name ".git" -exec rm -rf {} \;
      find ./web/sites/all/assets/vendor/ -name ".git" -exec rm -rf {} \;
      find ./web/libraries/ -name ".git" -exec rm -rf {} \;
      find ./web/sites/all/libraries/ -name ".git" -exec rm -rf {} \;
      cp -r web $CLONEFOLDER/web
      mv vendor $CLONEFOLDER/
      cp pantheon.yml $CLONEFOLDER/
      cd $CLONEFOLDER
      git add --all .
      git commit -m "$MESSAGE"
      git push origin $BRANCH
      cd ../
      rm -rf $CLONEFOLDER
      rm -rf web
      mv $BUILDFOLDER web
      git checkout -- composer.lock
      composer install --ignore-platform-reqs
      git checkout -- composer.lock

  install:
    usage: Run install commands
    cmd: |
      SITE_UUID="c3bd695e-f9ea-47ea-8881-0e473dd8644b"
      ahoy drush cc drush
      echo "Installing..."
      ahoy drush si fdi --account-pass=admin -y
      echo "Set site uuid..."
      ahoy drush config-set "system.site" uuid "$SITE_UUID" -y
      echo "Importing config..."
      if [ -f ./config/sync/core.extension.yml ] ; then ahoy drush cim -y ; fi
      echo "Cleaning cache..."
      ahoy drush cr
      echo "Import default content..."
      ahoy drush dcdi -y
  install-from-db:
    usage: Setup site using DB backup
    cmd: |
      if [ ! -f fdi.sql.gz ]; then
        wget `terminus backup:get fdi.live --element=db` -O fdi.sql.gz
      fi
      ahoy drush cr
      echo "Drop Database..."
      ahoy drush sql-drop -y
      echo "Import database..."
      gunzip -c fdi.sql.gz | ahoy drush sqlc
      echo "Sanitizing database..."
      ahoy drush sqlsan -y
      echo "Update database..."
      ahoy drush updb -y
      echo "Importing config..."
      ahoy drush cim -y
      echo "Cleaning cache..."
      ahoy drush cr
      echo "Generating an admin one time login link..."
      ahoy drush uli
